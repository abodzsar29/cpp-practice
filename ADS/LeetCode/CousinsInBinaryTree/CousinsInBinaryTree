/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        // vector<vector<int>> result;
        if (!root) { return false;};
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()) {
            vector<int> currentLevel = {};
            int levelSize = q.size();

            for(int i = 0; i < levelSize; i++) {
                TreeNode* tempNode = q.front();
                currentLevel.push_back(tempNode->val);
                if (tempNode->left) { q.push(tempNode->left);};
                if (tempNode->right) { q.push(tempNode->right);};
            }
            
            auto itx = find(currentLevel.begin(), currentLevel.end(), x);
            auto ity = find(currentLevel.begin(), currentLevel.end(), y);
            if( (itx != numbers.end() && ity != numbers.end()) { 
                return true;
            }
        }

        return false;
    }
};
